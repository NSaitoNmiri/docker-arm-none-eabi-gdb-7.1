diff -uprN gdb-7.1.org/bfd/archive64.c gdb-7.1/bfd/archive64.c
--- gdb-7.1.org/bfd/archive64.c	2009-09-09 21:38:57.000000000 +0000
+++ gdb-7.1/bfd/archive64.c	2017-02-18 14:39:45.880824524 +0000
@@ -43,7 +43,7 @@ bfd_elf64_archive_slurp_armap (bfd *abfd
 {
   struct artdata *ardata = bfd_ardata (abfd);
   char nextname[17];
-  file_ptr arhdrpos;
+  file_ptr __attribute__((__unused__)) arhdrpos;
   bfd_size_type i, parsed_size, nsymz, stringsize, carsym_size, ptrsize;
   struct areltdata *mapdata;
   bfd_byte int_buf[8];
diff -uprN gdb-7.1.org/bfd/bfd-in2.h gdb-7.1/bfd/bfd-in2.h
--- gdb-7.1.org/bfd/bfd-in2.h	2010-02-08 20:28:43.000000000 +0000
+++ gdb-7.1/bfd/bfd-in2.h	2017-02-18 14:41:55.518539607 +0000
@@ -517,7 +517,7 @@ extern void warn_deprecated (const char
 
 #define bfd_get_symbol_leading_char(abfd) ((abfd)->xvec->symbol_leading_char)
 
-#define bfd_set_cacheable(abfd,bool) (((abfd)->cacheable = bool), TRUE)
+#define bfd_set_cacheable(abfd,bool) ((abfd)->cacheable = bool)
 
 extern bfd_boolean bfd_cache_close
   (bfd *abfd);
diff -uprN gdb-7.1.org/bfd/compress.c gdb-7.1/bfd/compress.c
--- gdb-7.1.org/bfd/compress.c	2009-09-09 21:38:57.000000000 +0000
+++ gdb-7.1/bfd/compress.c	2017-02-18 14:39:45.880824524 +0000
@@ -51,7 +51,7 @@ DESCRIPTION
 */
 
 bfd_boolean
-bfd_uncompress_section_contents (bfd_byte **buffer, bfd_size_type *size)
+bfd_uncompress_section_contents (bfd_byte __attribute__((__unused__)) **buffer, bfd_size_type __attribute__((__unused__)) *size)
 {
 #ifndef HAVE_ZLIB_H
   /* These are just to quiet gcc.  */
diff -uprN gdb-7.1.org/bfd/cpu-arm.c gdb-7.1/bfd/cpu-arm.c
--- gdb-7.1.org/bfd/cpu-arm.c	2009-09-02 07:18:36.000000000 +0000
+++ gdb-7.1/bfd/cpu-arm.c	2017-02-18 14:39:45.880824524 +0000
@@ -228,7 +228,7 @@ arm_check_note (bfd *abfd,
 {
   unsigned long namesz;
   unsigned long descsz;
-  unsigned long type;
+  unsigned long __attribute__((__unused__)) type;
   char *        descr;
 
   if (buffer_size < offsetof (arm_Note, name))
diff -uprN gdb-7.1.org/bfd/doc/bfd.texinfo gdb-7.1/bfd/doc/bfd.texinfo
--- gdb-7.1.org/bfd/doc/bfd.texinfo	2009-09-02 07:18:38.000000000 +0000
+++ gdb-7.1/bfd/doc/bfd.texinfo	2017-02-18 14:39:45.880824524 +0000
@@ -323,7 +323,7 @@ All of BFD lives in one directory.
 @printindex cp
 
 @tex
-% I think something like @colophon should be in texinfo.  In the
+% I think something like @@colophon should be in texinfo.  In the
 % meantime:
 \long\def\colophon{\hbox to0pt{}\vfill
 \centerline{The body of this manual is set in}
@@ -334,7 +334,7 @@ All of BFD lives in one directory.
 \centerline{{\sl\fontname\tensl\/}}
 \centerline{are used for emphasis.}\vfill}
 \page\colophon
-% Blame: doc@cygnus.com, 28mar91.
+% Blame: doc@@cygnus.com, 28mar91.
 @end tex
 
 @bye
diff -uprN gdb-7.1.org/bfd/doc/chew.c gdb-7.1/bfd/doc/chew.c
--- gdb-7.1.org/bfd/doc/chew.c	2009-09-28 12:15:51.000000000 +0000
+++ gdb-7.1/bfd/doc/chew.c	2017-02-18 14:39:45.880824524 +0000
@@ -476,8 +476,8 @@ remove_noncomments (src, dst)
 static void
 print_stack_level ()
 {
-  fprintf (stderr, "current string stack depth = %d, ", tos - stack);
-  fprintf (stderr, "current integer stack depth = %d\n", isp - istack);
+  fprintf (stderr, "current string stack depth = %ld, ", tos - stack);
+  fprintf (stderr, "current integer stack depth = %ld\n", isp - istack);
   pc++;
 }
 
@@ -1563,7 +1563,7 @@ main (ac, av)
   write_buffer (stack + 0, stdout);
   if (tos != stack)
     {
-      fprintf (stderr, "finishing with current stack level %d\n",
+      fprintf (stderr, "finishing with current stack level %ld\n",
 	       tos - stack);
       return 1;
     }
diff -uprN gdb-7.1.org/bfd/elf-eh-frame.c gdb-7.1/bfd/elf-eh-frame.c
--- gdb-7.1.org/bfd/elf-eh-frame.c	2009-12-11 13:42:02.000000000 +0000
+++ gdb-7.1/bfd/elf-eh-frame.c	2017-02-18 14:39:45.880824524 +0000
@@ -1275,7 +1275,7 @@ _bfd_elf_eh_frame_section_offset (bfd *o
 {
   struct eh_frame_sec_info *sec_info;
   struct elf_link_hash_table *htab;
-  struct eh_frame_hdr_info *hdr_info;
+  struct eh_frame_hdr_info __attribute__((__unused__)) *hdr_info;
   unsigned int lo, hi, mid;
 
   if (sec->sec_info_type != ELF_INFO_TYPE_EH_FRAME)
diff -uprN gdb-7.1.org/bfd/elf.c gdb-7.1/bfd/elf.c
--- gdb-7.1.org/bfd/elf.c	2010-02-18 00:09:06.000000000 +0000
+++ gdb-7.1/bfd/elf.c	2017-02-18 14:39:45.880824524 +0000
@@ -4873,7 +4873,7 @@ static bfd_boolean
 prep_headers (bfd *abfd)
 {
   Elf_Internal_Ehdr *i_ehdrp;	/* Elf file header, internal form */
-  Elf_Internal_Phdr *i_phdrp = 0; /* Program header table, internal form */
+  Elf_Internal_Phdr __attribute__((__unused__)) *i_phdrp = 0; /* Program header table, internal form */
   struct elf_strtab_hash *shstrtab;
   const struct elf_backend_data *bed = get_elf_backend_data (abfd);
 
@@ -4989,7 +4989,7 @@ bfd_boolean
 _bfd_elf_write_object_contents (bfd *abfd)
 {
   const struct elf_backend_data *bed = get_elf_backend_data (abfd);
-  Elf_Internal_Ehdr *i_ehdrp;
+  Elf_Internal_Ehdr __attribute__((__unused__)) *i_ehdrp;
   Elf_Internal_Shdr **i_shdrp;
   bfd_boolean failed;
   unsigned int count, num_sec;
diff -uprN gdb-7.1.org/bfd/elf32-arm.c gdb-7.1/bfd/elf32-arm.c
--- gdb-7.1.org/bfd/elf32-arm.c	2010-02-18 10:56:26.000000000 +0000
+++ gdb-7.1/bfd/elf32-arm.c	2017-02-18 14:39:45.880824524 +0000
@@ -3453,7 +3453,7 @@ arm_build_one_stub (struct bfd_hash_entr
   struct bfd_link_info *info;
   asection *stub_sec;
   bfd *stub_bfd;
-  bfd_vma stub_addr;
+  bfd_vma __attribute__((__unused__)) stub_addr;
   bfd_byte *loc;
   bfd_vma sym_value;
   int template_size;
@@ -3678,7 +3678,7 @@ arm_size_one_stub (struct bfd_hash_entry
 		   void * in_arg)
 {
   struct elf32_arm_stub_hash_entry *stub_entry;
-  struct elf32_arm_link_hash_table *htab;
+  struct elf32_arm_link_hash_table __attribute__((__unused__)) *htab;
   const insn_sequence *template_sequence;
   int template_size, size;
 
@@ -5189,7 +5189,7 @@ record_vfp11_erratum_veneer (struct bfd_
   struct bfd_link_hash_entry *bh;
   bfd_vma val;
   struct _arm_elf_section_data *sec_data;
-  int errcount;
+  int __attribute__((__unused__)) errcount;
   elf32_vfp11_erratum_list *newerr;
 
   hash_table = elf32_arm_hash_table (link_info);
@@ -6083,7 +6083,7 @@ bfd_elf32_arm_vfp11_erratum_scan (bfd *a
                 {
                   elf32_vfp11_erratum_list *newerr =(elf32_vfp11_erratum_list *)
                       bfd_zmalloc (sizeof (elf32_vfp11_erratum_list));
-                  int errcount;
+                  int __attribute__((__unused__)) errcount;
 
                   errcount = ++(elf32_arm_section_data (sec)->erratumcount);
 
@@ -6797,8 +6797,8 @@ elf32_arm_final_link_relocate (reloc_how
   unsigned long                 r_symndx;
   bfd_byte *                    hit_data = contents + rel->r_offset;
   bfd *                         dynobj = NULL;
-  Elf_Internal_Shdr *           symtab_hdr;
-  struct elf_link_hash_entry ** sym_hashes;
+  Elf_Internal_Shdr __attribute__((__unused__)) *           symtab_hdr;
+  struct elf_link_hash_entry __attribute__((__unused__)) ** sym_hashes;
   bfd_vma *                     local_got_offsets;
   asection *                    sgot = NULL;
   asection *                    splt = NULL;
@@ -8945,7 +8945,7 @@ elf32_arm_relocate_section (bfd *
 	}
       else
 	{
-	  bfd_boolean warned;
+	  bfd_boolean __attribute__((__unused__)) warned;
 
 	  RELOC_FOR_GLOBAL_SYMBOL (info, input_bfd, input_section, rel,
 				   r_symndx, symtab_hdr, sym_hashes,
@@ -10710,7 +10710,7 @@ elf32_arm_check_relocs (bfd *abfd, struc
   const Elf_Internal_Rela *rel_end;
   bfd *dynobj;
   asection *sreloc;
-  bfd_vma *local_got_offsets;
+  bfd_vma __attribute__((__unused__)) *local_got_offsets;
   struct elf32_arm_link_hash_table *htab;
   bfd_boolean needs_plt;
   unsigned long nsyms;
@@ -12972,7 +12972,7 @@ arm_map_one_stub (struct bfd_hash_entry
 		  void * in_arg)
 {
   struct elf32_arm_stub_hash_entry *stub_entry;
-  struct bfd_link_info *info;
+  struct bfd_link_info __attribute__((__unused__)) *info;
   asection *stub_sec;
   bfd_vma addr;
   char *stub_name;
diff -uprN gdb-7.1.org/bfd/elflink.c gdb-7.1/bfd/elflink.c
--- gdb-7.1.org/bfd/elflink.c	2010-02-04 09:16:41.000000000 +0000
+++ gdb-7.1/bfd/elflink.c	2017-02-18 14:46:49.443267011 +0000
@@ -10345,7 +10345,7 @@ bfd_elf_final_link (bfd *abfd, struct bf
 	      else
 		BFD_ASSERT (entsize1 == bed->s->sizeof_rel
 			    || entsize1 == bed->s->sizeof_rela);
-	      same_size = !o->use_rela_p == (entsize1 == bed->s->sizeof_rel);
+	      same_size = (!(o->use_rela_p)) == (entsize1 == bed->s->sizeof_rel);
 
 	      if (!same_size)
 		rel_count1 = &esdo->rel_count2;
diff -uprN gdb-7.1.org/bfd/verilog.c gdb-7.1/bfd/verilog.c
--- gdb-7.1.org/bfd/verilog.c	2009-09-09 21:38:58.000000000 +0000
+++ gdb-7.1/bfd/verilog.c	2017-02-18 14:39:45.890812791 +0000
@@ -222,7 +222,7 @@ verilog_write_section (bfd *abfd,
   verilog_write_address (abfd, list->where);
   while (octets_written < list->size)
     {
-      bfd_vma address;
+      bfd_vma __attribute__((__unused__)) address;
       unsigned int octets_this_chunk = list->size - octets_written;
 
       if (octets_this_chunk > 16)
diff -uprN gdb-7.1.org/libiberty/regex.c gdb-7.1/libiberty/regex.c
--- gdb-7.1.org/libiberty/regex.c	2009-10-02 18:22:57.000000000 +0000
+++ gdb-7.1/libiberty/regex.c	2017-02-18 14:39:45.890812791 +0000
@@ -7140,8 +7140,8 @@ byte_re_match_2_internal (struct re_patt
                register from the stack, since lowest will == highest in
                `pop_failure_point'.  */
             active_reg_t dummy_low_reg, dummy_high_reg;
-            UCHAR_T *pdummy = NULL;
-            const CHAR_T *sdummy = NULL;
+            UCHAR_T __attribute__((__unused__)) *pdummy = NULL;
+            const CHAR_T __attribute__((__unused__)) *sdummy = NULL;
 
             DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
             POP_FAILURE_POINT (sdummy, pdummy,
